version: "3.8"

services:
  backend:
    build: .
    ports:
      - "${PORT:-4000}:${PORT:-4000}"
    environment:
      - NODE_ENV=development
      - PORT=${PORT:-4000}
      - MONGO_URI=mongodb://mongodb:27017/
      - JWT_SECRET=${JWT_SECRET:-thisismy__________________jwtSECRET789456123}
      - ACCESS_TOKEN_EXPIRE=${ACCESS_TOKEN_EXPIRE:-15m}
      - REFRESH_JWT_SECRET=${REFRESH_JWT_SECRET:-thisismy__________________refreshSECRET789456123}
      - REFRESH_TOKEN_EXPIRE=${REFRESH_TOKEN_EXPIRE:-7d}
      - REDIS_URL=redis://redis:6379
      - CLIENT_URL=${CLIENT_URL:-http://localhost:3000}
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - uploads:/usr/src/app/uploads
    user: "1001:1000" # This matches the nodeapp user we created
    restart: unless-stopped
    healthcheck:
      test:
        [
          "CMD",
          "node",
          "-e",
          "require('http').get('http://localhost:' + (process.env.PORT || 4000) + '/', (r) => r.statusCode === 200 ? process.exit(0) : process.exit(1))",
        ]
      interval: 30s
      timeout: 5s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: 512M
    networks:
      - app-network

  mongodb:
    image: mongo:4.4
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "mongo", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: "0.7"
          memory: 1G
    networks:
      - app-network

  redis:
    image: redis:alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 5s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: "0.3"
          memory: 256M
    networks:
      - app-network

volumes:
  mongodb_data:
    driver: local
  redis_data:
    driver: local
  uploads:
    driver: local

networks:
  app-network:
    driver: bridge
